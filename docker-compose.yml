services:
  envoy:
    container_name: envoy
    image: envoyproxy/envoy:dev-462b576551d826c500caf43199c1e26f81a882bc
    ports:
      - "8080:8080"
    networks:
      - dev
    volumes:
      - ./proxy/envoy/envoy.yaml:/etc/envoy/envoy.yaml

  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    ports:
      - "80:80"
    networks:
      - dev
    volumes:
      - ./proxy/nginx/nginx.conf:/etc/nginx/nginx.conf
    command: [nginx, '-g', 'daemon off;']
    depends_on:
      - envoy
      - server

  ngrok:
    container_name: ngrok
    image: ngrok/ngrok:latest
    command: http nginx:80
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    ports:
      - "4040:4040"
    depends_on:
      - nginx
    
  server:
    container_name: server
    build:
      context: .
      dockerfile: ./backend/server/Dockerfile
    ports:
      - "9090:9090"
    networks:
      - dev
    develop:
      watch:
        - action: rebuild
          path: ./backend/server/
    depends_on:
      - database

  parser:
    container_name: parser
    build:
      context: .
      dockerfile: ./backend/parser/Dockerfile
    networks:
      - dev
    develop:
      watch:
        - action: rebuild
          path: ./backend/parser/
    depends_on:
      - database

  web_builder:
    container_name: web_builder
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    networks:
      - dev
    develop:
      watch:
        - action: rebuild
          path: ./frontend/lib/
    ports:
      - "8081:8081"

  bot:
    container_name: bot
    build:
      context: ./bot
      dockerfile: Dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./bot/


  database:
    image: postgres:latest
    container_name: database
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    networks:
      - dev
    stdin_open: true

networks:
  dev:
    driver: bridge

volumes:
  pgdata:
