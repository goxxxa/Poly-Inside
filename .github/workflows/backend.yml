name: Dart Backend CI

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - "shared/**"
  pull_request:
    branches: ["main"]
    paths:
      - "backend/**"
      - "shared/**"

jobs:
  shared_build:
    name: Build Shared
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        working-directory: shared
        run: dart pub get
      
      - name: Code generation
        working-directory: shared
        run: dart run build_runner build --delete-conflicting-outputs

  server_build:
    name: Build Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install server dependencies
        working-directory: backend/server
        run: dart pub get

      - name: Code generation in Shared folder
        working-directory: shared
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Code generation in Common folder
        working-directory: backend/common
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Code generation in Server folder
        working-directory: backend/server
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Create .env file from Github secrets
        working-directory: backend/common
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env

      - name: Build server executable
        working-directory: backend/server
        run: dart compile exe bin/server.dart -o bin/server

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        working-directory: backend/server
        run: |
          docker build -t server .

  parser_build:
    name: Build Parser
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install parser dependencies
        working-directory: backend/parser
        run: dart pub get

      - name: Code generation in Shared folder
        working-directory: shared
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Code generation in Common folder
        working-directory: backend/common
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Code generation in Parser folder
        working-directory: backend/parser
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Build parser executable
        working-directory: backend/parser
        run: dart compile exe bin/parser.dart -o bin/parser

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        working-directory: backend/parser
        run: |
          docker build -t parser .
