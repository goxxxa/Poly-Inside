// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema5 extends i0.VersionedSchema {
  Schema5({required super.database}) : super(version: 5);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    professors,
    users,
    reviews,
    rejectedReviews,
    reactions,
    groups,
    groupsNumbers,
  ];
  late final Shape0 professors = Shape0(
      source: i0.VersionedTable(
        entityName: 'professors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 users = Shape1(
      source: i0.VersionedTable(
        entityName: 'users',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_10,
          _column_1,
          _column_3,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 reviews = Shape2(
      source: i0.VersionedTable(
        entityName: 'reviews',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_13,
          _column_14,
          _column_15,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_16,
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 rejectedReviews = Shape2(
      source: i0.VersionedTable(
        entityName: 'rejected_reviews',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_13,
          _column_14,
          _column_15,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_16,
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 reactions = Shape3(
      source: i0.VersionedTable(
        entityName: 'reactions',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_13,
          _column_14,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 groups = Shape4(
      source: i0.VersionedTable(
        entityName: 'groups',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_21,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 groupsNumbers = Shape5(
      source: i0.VersionedTable(
        entityName: 'groups_numbers',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get smallAvatar =>
      columnsByName['small_avatar']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get avatar =>
      columnsByName['avatar']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<int> get reviewsCount =>
      columnsByName['reviews_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get rating =>
      columnsByName['rating']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get objectivity =>
      columnsByName['objectivity']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get loyalty =>
      columnsByName['loyalty']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get professionalism =>
      columnsByName['professionalism']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get harshness =>
      columnsByName['harshness']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<i2.Uint8List> _column_2(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('small_avatar', aliasedName, false,
        type: i1.DriftSqlType.blob);
i1.GeneratedColumn<i2.Uint8List> _column_3(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('avatar', aliasedName, false,
        type: i1.DriftSqlType.blob);
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>('reviews_count', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<double> _column_5(String aliasedName) =>
    i1.GeneratedColumn<double>('rating', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_6(String aliasedName) =>
    i1.GeneratedColumn<double>('objectivity', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_7(String aliasedName) =>
    i1.GeneratedColumn<double>('loyalty', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_8(String aliasedName) =>
    i1.GeneratedColumn<double>('professionalism', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_9(String aliasedName) =>
    i1.GeneratedColumn<double>('harshness', aliasedName, false,
        type: i1.DriftSqlType.double);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get avatar =>
      columnsByName['avatar']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<int> get rating =>
      columnsByName['rating']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get group =>
      columnsByName['group']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('rating', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('group', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get professorId =>
      columnsByName['professor_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get comment =>
      columnsByName['comment']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get objectivity =>
      columnsByName['objectivity']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get loyalty =>
      columnsByName['loyalty']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get professionalism =>
      columnsByName['professionalism']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get harshness =>
      columnsByName['harshness']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get date =>
      columnsByName['date']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get likes =>
      columnsByName['likes']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get dislikes =>
      columnsByName['dislikes']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('user_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('professor_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('comment', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('date', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('likes', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>('dislikes', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get professorId =>
      columnsByName['professor_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get reviewId =>
      columnsByName['review_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get liked =>
      columnsByName['liked']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('review_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_20(String aliasedName) =>
    i1.GeneratedColumn<bool>('liked', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('CHECK ("liked" IN (0, 1))'));

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get number =>
      columnsByName['number']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get professorId =>
      columnsByName['professor_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('number', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get number =>
      columnsByName['number']! as i1.GeneratedColumn<String>;
}

final class Schema6 extends i0.VersionedSchema {
  Schema6({required super.database}) : super(version: 6);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    professors,
    users,
    reviews,
    rejectedReviews,
    reactions,
    groups,
    groupsNumbers,
  ];
  late final Shape0 professors = Shape0(
      source: i0.VersionedTable(
        entityName: 'professors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 users = Shape1(
      source: i0.VersionedTable(
        entityName: 'users',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_10,
          _column_1,
          _column_3,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 reviews = Shape6(
      source: i0.VersionedTable(
        entityName: 'reviews',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_13,
          _column_14,
          _column_15,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_16,
          _column_17,
          _column_18,
          _column_22,
          _column_23,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 rejectedReviews = Shape2(
      source: i0.VersionedTable(
        entityName: 'rejected_reviews',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_13,
          _column_14,
          _column_15,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_16,
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 reactions = Shape3(
      source: i0.VersionedTable(
        entityName: 'reactions',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_13,
          _column_14,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 groups = Shape4(
      source: i0.VersionedTable(
        entityName: 'groups',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_21,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 groupsNumbers = Shape5(
      source: i0.VersionedTable(
        entityName: 'groups_numbers',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get professorId =>
      columnsByName['professor_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get comment =>
      columnsByName['comment']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get objectivity =>
      columnsByName['objectivity']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get loyalty =>
      columnsByName['loyalty']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get professionalism =>
      columnsByName['professionalism']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get harshness =>
      columnsByName['harshness']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get date =>
      columnsByName['date']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get likes =>
      columnsByName['likes']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get dislikes =>
      columnsByName['dislikes']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get currentUserReaction =>
      columnsByName['current_user_reaction']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get currentUserReactionLink =>
      columnsByName['current_user_reaction_link']!
          as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_22(String aliasedName) =>
    i1.GeneratedColumn<int>('current_user_reaction', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('current_user_reaction_link', aliasedName, true,
        type: i1.DriftSqlType.string);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 4:
        final schema = Schema5(database: database);
        final migrator = i1.Migrator(database, schema);
        await from4To5(migrator, schema);
        return 5;
      case 5:
        final schema = Schema6(database: database);
        final migrator = i1.Migrator(database, schema);
        await from5To6(migrator, schema);
        return 6;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from4To5: from4To5,
      from5To6: from5To6,
    ));
